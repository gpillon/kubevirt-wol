// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: api/wol/v1/wol.proto

package wolv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WOLService_ReportWOLEvent_FullMethodName       = "/wol.v1.WOLService/ReportWOLEvent"
	WOLService_ReportWOLEventStream_FullMethodName = "/wol.v1.WOLService/ReportWOLEventStream"
	WOLService_HealthCheck_FullMethodName          = "/wol.v1.WOLService/HealthCheck"
)

// WOLServiceClient is the client API for WOLService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// WOLService riceve eventi WOL dagli agent distribuiti
type WOLServiceClient interface {
	// ReportWOLEvent invia un evento WOL all'operator centrale
	ReportWOLEvent(ctx context.Context, in *WOLEvent, opts ...grpc.CallOption) (*WOLEventResponse, error)
	// ReportWOLEventStream supporta streaming per multiple events (opzionale per future)
	ReportWOLEventStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[WOLEvent, WOLEventResponse], error)
	// HealthCheck per verificare che il server gRPC sia attivo
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type wOLServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWOLServiceClient(cc grpc.ClientConnInterface) WOLServiceClient {
	return &wOLServiceClient{cc}
}

func (c *wOLServiceClient) ReportWOLEvent(ctx context.Context, in *WOLEvent, opts ...grpc.CallOption) (*WOLEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WOLEventResponse)
	err := c.cc.Invoke(ctx, WOLService_ReportWOLEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wOLServiceClient) ReportWOLEventStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[WOLEvent, WOLEventResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WOLService_ServiceDesc.Streams[0], WOLService_ReportWOLEventStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WOLEvent, WOLEventResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WOLService_ReportWOLEventStreamClient = grpc.BidiStreamingClient[WOLEvent, WOLEventResponse]

func (c *wOLServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, WOLService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WOLServiceServer is the server API for WOLService service.
// All implementations must embed UnimplementedWOLServiceServer
// for forward compatibility.
//
// WOLService riceve eventi WOL dagli agent distribuiti
type WOLServiceServer interface {
	// ReportWOLEvent invia un evento WOL all'operator centrale
	ReportWOLEvent(context.Context, *WOLEvent) (*WOLEventResponse, error)
	// ReportWOLEventStream supporta streaming per multiple events (opzionale per future)
	ReportWOLEventStream(grpc.BidiStreamingServer[WOLEvent, WOLEventResponse]) error
	// HealthCheck per verificare che il server gRPC sia attivo
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedWOLServiceServer()
}

// UnimplementedWOLServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWOLServiceServer struct{}

func (UnimplementedWOLServiceServer) ReportWOLEvent(context.Context, *WOLEvent) (*WOLEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportWOLEvent not implemented")
}
func (UnimplementedWOLServiceServer) ReportWOLEventStream(grpc.BidiStreamingServer[WOLEvent, WOLEventResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReportWOLEventStream not implemented")
}
func (UnimplementedWOLServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedWOLServiceServer) mustEmbedUnimplementedWOLServiceServer() {}
func (UnimplementedWOLServiceServer) testEmbeddedByValue()                    {}

// UnsafeWOLServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WOLServiceServer will
// result in compilation errors.
type UnsafeWOLServiceServer interface {
	mustEmbedUnimplementedWOLServiceServer()
}

func RegisterWOLServiceServer(s grpc.ServiceRegistrar, srv WOLServiceServer) {
	// If the following call pancis, it indicates UnimplementedWOLServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WOLService_ServiceDesc, srv)
}

func _WOLService_ReportWOLEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WOLEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WOLServiceServer).ReportWOLEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WOLService_ReportWOLEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WOLServiceServer).ReportWOLEvent(ctx, req.(*WOLEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _WOLService_ReportWOLEventStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WOLServiceServer).ReportWOLEventStream(&grpc.GenericServerStream[WOLEvent, WOLEventResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WOLService_ReportWOLEventStreamServer = grpc.BidiStreamingServer[WOLEvent, WOLEventResponse]

func _WOLService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WOLServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WOLService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WOLServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WOLService_ServiceDesc is the grpc.ServiceDesc for WOLService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WOLService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wol.v1.WOLService",
	HandlerType: (*WOLServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportWOLEvent",
			Handler:    _WOLService_ReportWOLEvent_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _WOLService_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReportWOLEventStream",
			Handler:       _WOLService_ReportWOLEventStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/wol/v1/wol.proto",
}
